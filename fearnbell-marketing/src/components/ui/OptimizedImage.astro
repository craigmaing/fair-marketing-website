---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  placeholder?: boolean;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy',
  class: className = '',
  placeholder = true
} = Astro.props;

// Generate a base64 placeholder for immediate loading
const placeholderSrc = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 ${width || 800} ${height || 600}'%3E%3Crect width='100%25' height='100%25' fill='%23e2e8f0'/%3E%3C/svg%3E`;
---

<div class={`image-wrapper ${className}`}>
  <img 
    src={placeholder ? placeholderSrc : src}
    data-src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class="optimized-image"
    decoding="async"
  />
  <noscript>
    <img src={src} alt={alt} width={width} height={height} />
  </noscript>
</div>

<style>
  .image-wrapper {
    position: relative;
    overflow: hidden;
  }
  
  .optimized-image {
    display: block;
    width: 100%;
    height: auto;
    transition: opacity 0.3s;
  }
  
  .optimized-image.loaded {
    opacity: 1;
  }
</style>

<script>
  // Lazy load images when they come into view
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          const src = img.dataset.src;
          if (src) {
            img.src = src;
            img.classList.add('loaded');
            observer.unobserve(img);
          }
        }
      });
    });

    document.querySelectorAll('.optimized-image').forEach(img => {
      if ((img as HTMLImageElement).loading === 'lazy') {
        imageObserver.observe(img);
      }
    });
  }
</script>